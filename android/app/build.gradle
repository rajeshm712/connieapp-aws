def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
//    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

ext.playCustomRingback = {
    def playCustomRingback  = System.getenv("playCustomRingback");

    if (playCustomRingback == null) {
        logger.log(LogLevel.INFO, "Could not locate playCustomRingback environment variable. " +
                "Trying local.properties")
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            playCustomRingback = properties.getProperty('playCustomRingback')
        }
    }

    if (playCustomRingback == null) {
        playCustomRingback = false
    }

    return playCustomRingback;
}


android {
    compileSdkVersion 30

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.conigital.connie"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.debug
                buildConfigField("boolean", "playCustomRingback", "${playCustomRingback()}")
            }
            debug {
                buildConfigField("boolean", "playCustomRingback", "${playCustomRingback()}")
            }

    }

    // Specify that we want to split up the APK based on ABI
    splits {
        abi {
            // Enable ABI split
            enable true

            // Clear list of ABIs
            reset()

            // Specify each architecture currently supported by the Video SDK
            include "armeabi-v7a"

            // Specify that we do not want an additional universal SDK
            universalApk true
        }
    }


}

flutter {
    source '../..'
}

dependencies {
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:27.0.0')
    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    implementation 'com.twilio:voice-android:5.7.2'
    implementation 'androidx.lifecycle:lifecycle-process:2.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.github.zagum:SpeechRecognitionView:1.2.2'
    implementation 'joda-time:joda-time:2.10.10'

//    implementation 'com.google.android.exoplayer:exoplayer:2.8.2'
//    implementation 'org.greenrobot:eventbus:3.0.0'
//    implementation "androidx.core:core-ktx:+"
//    implementation 'androidx.media2:media2-exoplayer:1.0.3'

}
repositories {
    mavenCentral()
}
